{1,
{8,
{"Караваев",1,0,"",""},
{0,
{"Комментарий изменений",0,0,"Комм","//ИТС+ Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">
<?>
//ИТС- Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">"}
},
{0,
{"Текущие данные табличной части",0,0,"Тек","ТекущиеДанные = Элементы.<?""Табличная часть"">.ТекущиеДанные;

Если ТекущиеДанные = Неопределено Тогда
	Возврат;
КонецЕсли;

<?>"}
},
{0,
{"Запрос",0,0,"Запр","Запрос = Новый Запрос;
Запрос.Текст = ""<?>"";"}
},
{0,
{"СКД с внешними наборами",0,0,"","СтандартнаяОбработка = Ложь;

НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();

//ПериодОтчета = НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти(""ПериодОтчета"").Значение;

ВнешниеНаборы = Новый Структура;
ВнешниеНаборы.Вставить(""Таблица"", Таблица);

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки,, Тип(""ГенераторМакетаКомпоновкиДанных""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);"}
},
{0,
{"СКД в таблицу значений",0,0,"СКД","СхемаКомпоновкиДанных = Обработки.ИТС_ФормированиеДокументов.ПолучитьМакет(""Макет"");
НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
//ПараметрыДанных.Найти(""ИмяПараметра"").Значение = ЗначениеПараметра;

ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки,, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);

ТаблицаДанных = Новый ТаблицаЗначений;
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);"}
},
{4,
{"Асинхронные вызовы",1,0,"",""},
{0,
{"Асинхронная процедура",0,0,"Асинх","#Область <?""Имя процедуры"">
// Подготавливает параметры для выполнения фонового задания
// вызывает серверную функцию для запуска фонового задания
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеНаКлиенте()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""Процедура"",				<ИмяЭкспортнойПроцедурыМодуляМенеджера>);
	СтруктураПараметров.Вставить(""ТекстСообщения"", 			<ТекстСообщенияВФормеДлительнойОперации>);
	СтруктураПараметров.Вставить(""ТекстСообщенияВыполнено"",	<ТекстСообщенияВыполнено>);
	СтруктураПараметров.Вставить(""ТекстСообщенияОтмена"",	<ТекстСообщенияОтмена>);
	
	<?>
		
	ДлительнаяОперация = <?""Имя процедуры"">ВФонеНаСервере(СтруктураПараметров);
	Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеЗавершение"", ЭтотОбъект, СтруктураПараметров);
	
	Если ДлительнаяОперация.Статус = ""Выполняется"" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ТекстСообщения = СтруктураПараметров.ТекстСообщения;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		<?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеНаКлиенте()

// Инициализирует и запускает выполнение задания в фоне
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, которая будет передана в процедуру
//
// Возвращаемое значение:
//   Структура   - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеНаСервере(Знач СтруктураПараметров)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(СтруктураПараметров.Процедура, СтруктураПараметров, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;

КонецФункции // <?""Имя процедуры"">ВФонеНаСервере()

// Вызывается по завершению выполнения фонового задания
//
// Параметры:
//  ДлительнаяОперация  - Структура - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//	СтруктураПараметров - Структура - Структура дополнительных параметров переданная в процедуре <?""Имя процедуры"">ВФонеНаКлиенте()
//                 
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров) Экспорт 

	Если Не ТипЗнч(ДлительнаяОперация) = Тип(""Структура"") Тогда 
		Возврат;
	КонецЕсли;
	
	ОбрабатыватьНаСервере = Ложь;
	
	Если ДлительнаяОперация.Статус = ""Выполнено"" Тогда
		Если ОбрабатыватьНаСервере Тогда
		    МассивСообщений = <?""Имя процедуры"">ВФонеОбработатьРезультат(ДлительнаяОперация.АдресРезультата);
		Иначе
			СтруктураВозврата = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			МассивСообщений = СтруктураВозврата.МассивСообщений;
		КонецЕсли;
		
		Для Каждого ТекСообщение Из МассивСообщений Цикл
			ТекСообщение.Сообщить();
		КонецЦикла;
				
		Если СтруктураПараметров.Свойство(""ТекстСообщенияВыполнено"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияВыполнено);
		КонецЕсли;
	ИначеЕсли ДлительнаяОперация.Статус = ""Ошибка"" Тогда
		Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеОшибка"", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, ДлительнаяОперация.ПодробноеПредставлениеОшибки);		
	ИначеЕсли ДлительнаяОперация.Статус = ""Отменено"" Тогда 
		Если СтруктураПараметров.Свойство(""ТекстСообщенияОтмена"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеЗавершение()

// Получает из временного хранилища результат выполения фонового задания
//
// Параметры:
//  АдресРезультата  - Строка - Адрес результата во временном хранилище
//
// Возвращаемое значение:
//   Массив   - Массив строк сообщений из процедуры выполнения фонового задания
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеОбработатьРезультат(АдресРезультата)

	МассивСообщений = Новый Массив;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ТипЗнч(СтруктураВозврата) = Тип(""Структура"") Тогда
		Возврат МассивСообщений;
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство(""Успешно"") И СтруктураВозврата.Успешно Тогда 
		<ВставитьОбработкуРезультата>
	КонецЕсли;
		
	Если СтруктураВозврата.Свойство(""МассивСообщений"") Тогда
		МассивСообщений = СтруктураВозврата.МассивСообщений;
	КонецЕсли;
	
	Возврат МассивСообщений;
			
КонецФункции // <?""Имя процедуры"">ВФонеОбработатьРезультат()

// Вызывается при обработке результата выполнения фонового задания, при возникновении ошибки в процедуре фонового задания
// Например, можно перезапустить выполнение фонового задания
//
// Параметры:
//  ДопПараметры  - Структура - Дополнительные параметры переданные в Предупреждение об ошибке в процедуре <?""Имя процедуры"">ВФонеЗавершение
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеОшибка(ДопПараметры) Экспорт 

	<ВставитьОбрабокуЕслиЕстьОшибка>
		
КонецПроцедуры // <?""Имя процедуры"">ВФонеОшибка()
#КонецОбласти"}
},
{0,
{"Асинхронная процедура вызываемая в фоновом задании",0,1,"Асинх","#Область <?""Имя процедуры"">
// Процедура вызывается при обработке выполнения фонового задания
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, переданная при запуске фонового задания
//  АдресХранилища  - Строка - Адрес во временном хранилище для помещения результата работы процедуры
//
Процедура <?""Имя процедуры"">(СтруктураПараметров, АдресХранилища) Экспорт 
	
	ДлительныеОперации.СообщитьПрогресс(0, СтруктураПараметров.ТекстСообщения);
	
	Успешно = Истина;
	МассивСообщений = Новый Массив;
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить(""Успешно"", Успешно);
	
	
	<?>
	
	СтруктураВозврата.Вставить(""МассивСообщений"", ДлительныеОперации.СообщенияПользователю());
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры
#КонецОбласти"}
},
{0,
{"Асинхронная команда доп.обработки",0,0,"Асинх","#Область <?""Имя процедуры"">
// Процедура - <?""Имя процедуры"">ВФонеНаКлиенте
// Выполняет процедуру из модуля обработки в фоновом режиме
//	Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеНаКлиенте()
	
	ОчиститьСообщения();
	
	ПараметрыКоманды = ДополнительныеОтчетыИОбработкиКлиент.ПараметрыВыполненияКомандыВФоне(Параметры.ДополнительнаяОбработкаСсылка);
    ПараметрыКоманды.СопровождающийТекст = НСтр(""ru = '<Вставить представление выполняемой команды...>'"");
	ПараметрыКоманды.Вставить(""ПолучатьРезультат"", Истина);
	ПараметрыКоманды.Вставить(""АдресВременногоХранилища"", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
	
	<?>
	
	ИдентификаторКоманды = ""<?""Имя процедуры"">"";
	
    Если ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда 
    	Обработчик = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеЗавершение"", ЭтотОбъект, ПараметрыКоманды.СопровождающийТекст);
    	ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне(ИдентификаторКоманды, ПараметрыКоманды, Обработчик);
	Иначе		
		Операция = <?""Имя процедуры"">НеВФонеНаСервере(ИдентификаторКоманды, ПараметрыКоманды);		
		<?""Имя процедуры"">ВФонеЗавершение(Операция, ПараметрыКоманды.СопровождающийТекст);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция <?""Имя процедуры"">НеВФонеНаСервере(ИдентификаторКоманды, Знач ПараметрыКоманды)

	ПараметрыКоманды.Вставить(""РезультатВыполнения"", Новый Структура);
	
	Операция = Новый Структура(""Статус"", ""Выполнено"");
	
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
		ОбработкаОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды);
		
		Операция.Вставить(""АдресРезультата"", ПоместитьВоВременноеХранилище(ПараметрыКоманды.РезультатВыполнения, УникальныйИдентификатор));
	Исключение
		Операция.Статус = ""Ошибка"";
		Операция.Вставить(""ПодробноеПредставлениеОшибки"", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Операция;

КонецФункции

// Процедура - <?""Имя процедуры"">ВФонеЗавершение
//
//Параметры процедуры:
//         * Задание - Структура, Неопределено - сведения о фоновом задании.
//             ** Статус - Строка - ""Выполнено"" (задание завершено) или ""Ошибка"" (в задании возникло исключение).
//             ** АдресРезультата - Строка - адрес временного хранилища, по которому размещен результат процедуры.
//                 Результат заполняется в структуре ПараметрыВыполнения.РезультатВыполнения обработчика команды.
//             ** КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = ""Ошибка"".
//             ** ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = ""Ошибка"".
//             ** Сообщения - ФиксированныйМассив, Неопределено - сообщения из фонового задания.
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеЗавершение(Операция, СопровождающийТекст) Экспорт
    
	Если Не ЗначениеЗаполнено(Операция) Тогда
		Возврат;
	КонецЕсли;
	
    Если Операция.Статус = ""Выполнено"" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
		Если РезультатВыполнения.Успешно Тогда
			//Раскомментировать для обработки результата на сервере
			//ВыполнитьОперациюВФонеЗавершениеНаСервере(РезультатВыполнения.АдресВременногоХранилища);
			<Обработать результат>
			ПоказатьОповещениеПользователя(НСтр(""ru = 'Успешное завершение'""), , СопровождающийТекст, БиблиотекаКартинок.Успешно32);
		КонецЕсли;
		
		Для Каждого ТекСообщение Из РезультатВыполнения.МассивСообщений Цикл
			Если ТипЗнч(ТекСообщение) = Тип(""СообщениеПользователю"") Тогда 
				ТекСообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
		
    Иначе
        ВызватьИсключение Операция.ПодробноеПредставлениеОшибки;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура <?""Имя процедуры"">ВФонеЗавершениеНаСервере(Адрес)

	

КонецПроцедуры
#КонецОбласти"}
},
{0,
{"Асинхронная команда в объекте доп.обработки",0,0,"Асинх","#Область <?""Имя процедуры"">
Процедура <?""Имя процедуры"">(ПараметрыКоманды)

	РезультатВыполнения = Новый Структура(""Успешно"", Истина);
	
	<?>
	
	СтруктураТаблиц = Новый Структура;
	
		
	РезультатВыполнения.Вставить(""МассивСообщений"", ДлительныеОперации.СообщенияПользователю(Истина));
	РезультатВыполнения.Вставить(""АдресВременногоХранилища"", ПоместитьВоВременноеХранилище(СтруктураТаблиц, ПараметрыКоманды.АдресВременногоХранилища));
	ПараметрыКоманды.РезультатВыполнения = РезультатВыполнения;

КонецПроцедуры
#КонецОбласти"}
}
},
{6,
{"БСП",1,0,"",""},
{3,
{"ДополнительныеОтчетыИОбработки",1,0,"",""},
{0,
{"Дополнительная обработка",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней обработки
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""3.2.0.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
},
{0,
{"Дополнительный отчет",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней обработки, отчета, печатной формы
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""3.2.0.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
},
{0,
{"Внешняя печатная форма",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней печатной формы
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""3.2.0.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Документ"", Документ>"");
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.Модификатор = ""ПечатьMXL"";
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<?""Идентификатор"">"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати, ПараметрыВывода);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""Наименование"">'"");
    КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_<?""Идентификатор"">"";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Макет = ПолучитьМакет(""ПФ_MXL_<?""Идентификатор"">"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса();
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть(""Шапка"");
				
		ДанныеОбласти = Новый Структура;
		<?>	
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыВывода);
		ОбластьШапка.Параметры.Заполнить(Выборка);
		ОбластьШапка.Параметры.Заполнить(ДанныеОбласти);
		ЗаполнитьПустыеПараметры(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапка);
					
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;	
	
    Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапроса()
	
	Возврат """";
	
КонецФункции

Процедура ЗаполнитьПустыеПараметры(Область)
	
	Для Сч = 0 По Область.Параметры.Количество() - 1 Цикл
		Если Не ЗначениеЗаполнено(Область.Параметры.Получить(Сч)) Тогда 
			Область.Параметры.Установить(Сч, ""_______________"");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры"}
}
},
{9,
{"Печать",1,0,"",""},
{0,
{"ДобавитьКомандыПечати процедура в модуле менеджера",0,0,"БСП","#Область Печать
// СтандартныеПодсистемы.Печать
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	<?>
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
#КонецОбласти"}
},
{0,
{"КомандаПечати в модуле менеджера",0,0,"БСП","// <?""Представление"">
КомандаПечати = КомандыПечати.Добавить();
КомандаПечати.Идентификатор = ""<?""Идентификатор"">"";
КомандаПечати.Представление = НСтр(""ru = '<?""Представление"">'"");
КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
КомандаПечати.Порядок = 100;"}
},
{0,
{"Печать в модуле менеджера",0,0,"БСП","// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"Печать код вызова формирования печатной формы",0,0,"БСП","НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ""<?""Идентификатор"">"");
Если НужноПечататьМакет Тогда
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм,
	""<?""Идентификатор"">"",
	НСтр(""ru = '<?""Представление"">'""),
	Печать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати),
	,
	""Документ.<?""Документ"", Документ>.ПФ_MXL_<?""Идентификатор"">"");
КонецЕсли;"}
},
{0,
{"Печать функция формирования табличного документа",0,0,"БСП","Функция Печать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_<?""Идентификатор"">"";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(""Документ.<?""Документ"", Документ>.ПФ_MXL_<?""Идентификатор"">"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	               |	<?""Документ"", Документ>.Ссылка КАК Ссылка,
	               |	<?""Документ"", Документ>.Номер КАК Номер,
	               |	<?""Документ"", Документ>.Дата КАК Дата
	               |ИЗ
	               |	Документ.<?""Документ"", Документ> КАК <?""Документ"", Документ>
	               |ГДЕ
	               |	<?""Документ"", Документ>.Ссылка В(&МассивОбъектов)"";
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока ВыборкаШапка.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаВыборкаШапка = Макет.ПолучитьОбласть(""ВыборкаШапка"");
		ОбластьМакетаВыборкаШапка.Параметры.Заполнить(ВыборкаШапка);
		ПоляЗаголовка = Новый Структура(""Номер, Дата, ГосударственныйКонтракт"");
		ЗаполнитьЗначенияСвойств(ПоляЗаголовка, ВыборкаШапка);
		ПредставлениеФормы = ""<?""Представление"">"";
		ДанныеОбласти = Новый Структура;
		ДанныеОбласти.Вставить(
			""ТекстЗаголовка"",
			ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ПоляЗаголовка, ПредставлениеФормы, Истина));
			
		ОбластьМакетаВыборкаШапка.Параметры.Заполнить(ДанныеОбласти);		
		ТабличныйДокумент.Вывести(ОбластьМакетаВыборкаШапка);
		
		<?>
		
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть(""Подвал"");
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаШапка);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапка.Ссылка);
	КонецЦикла;	
	
    Возврат ТабличныйДокумент;
	
КонецФункции"}
},
{0,
{"Печать для отладки в форме",0,0,"","#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.МассивОбъектов) Тогда
		Объект.СсылкаНаОбъект = Параметры.МассивОбъектов[0];
		Элементы.СсылкаНаОбъект.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСпискиВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъектПриИзменении(Элемент)
	
	ЗаполнитьСпискиВыбора();
	
КонецПроцедуры
#КонецОбласти

#Область ПечатьВызовКлиентскогоМетода
//Процедура вызывается для внешней печатной формы с вариантом команды ВызовКлиентскогоМетода
&НаКлиенте
Процедура Печать(ИдентификаторКоманды, МассивОбъектов) Экспорт
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ИдентификаторКоманды"", ИдентификаторКоманды);
	ПараметрыФормы.Вставить(""МассивОбъектов"", МассивОбъектов);
	
	ПолноеИмяОбъекта = ИмяОбработки();

	ОткрытьФорму(ПолноеИмяОбъекта + "".Форма.Форма"", ПараметрыФормы);
		
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедуры
//Возвращает полное имя обработки
&НаСервере
Функция ИмяОбработки()

	Возврат РеквизитФормыВЗначение(""Объект"").Метаданные().ПолноеИмя();

КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
			
КонецПроцедуры

//Добавляет элемент в список выбора, заменяя разделители
&НаСервере
Процедура ДобавитьЭлементВСписок(Список, Текст)

	Представление = Текст;
	Если СтрНайти(Текст, ""|"") > 0 Тогда
		Представление = СтрЗаменить(Текст, ""|"", ""                    "");
	КонецЕсли;
	
	Список.Добавить(Текст, Представление);

КонецПроцедуры
#КонецОбласти

#Область ПечатьИзФормы
&НаКлиенте
Процедура ПечатьКоманда(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатПечати = ПечатьНаСервере();
	УправлениеПечатьюКлиент.ПечатьДокументов(РезультатПечати.КоллекцияПечатныхФорм, РезультатПечати.ОбъектыПечати);
	
	Если ЗначениеЗаполнено(Параметры.МассивОбъектов) Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	
	Если ЗначениеЗаполнено(Параметры.МассивОбъектов) Тогда
		МассивОбъектов = Параметры.МассивОбъектов;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект.СсылкаНаОбъект);
	КонецЕсли;
	
	МассивПечатныхФорм	= Новый Массив;
	МассивПечатныхФорм.Добавить(""<?""Идентификатор команды"">"");
	
	ИдентификаторКоманды = ?(ЗначениеЗаполнено(Параметры.ИдентификаторКоманды), Параметры.ИдентификаторКоманды, ""<?""Идентификатор команды"">"");
	
	КоллекцияПечатныхФорм	= УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИдентификаторКоманды);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(Объект.СсылкаНаОбъект);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить(""ДоступнаПечатьПоКомплектно"",Истина);
	<?>
	ОбработкаОбъект.Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	РезультатПечати = Новый Структура;
	РезультатПечати.Вставить(""КоллекцияПечатныхФорм"", ОбщегоНазначения.ТаблицаЗначенийВМассив(КоллекцияПечатныхФорм));
	РезультатПечати.Вставить(""ОбъектыПечати"", ОбъектыПечати);
	
	Возврат РезультатПечати;

КонецФункции
#КонецОбласти"}
},
{0,
{"ПечатьДокументовКлиент",0,0,"","ИдентификаторПечатнойФормы = ""<?""Идентификатор"">"";
НазваниеПечатнойФормы = НСтр(""ru='<?""Название"">'"");

КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
ПечатнаяФорма.СинонимМакета         = НазваниеПечатнойФормы;
ПечатнаяФорма.ТабличныйДокумент     = Результат;
ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;

УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);"}
},
{0,
{"Сформировать офисный документ",0,0,"","Функция СформироватьОфисныйДокумент(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ОфисныеДокументы = Новый Соответствие;
	МакетДокумента = ПолучитьМакет(""ПФ_DOC_ИТС_ПриказОПредоставленииОтпуска"");
	Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(МакетДокумента, Неопределено);
	ОписаниеОбластей = ПолучитьОписаниеОбластей(Макет);
	ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, Неопределено, Макет);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса();
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент И ОписаниеОбластей.Свойство(""РазрывСтраницы"") Тогда 
			Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""РазрывСтраницы""]);
			УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область);
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ДанныеПечати = Новый Структура;
		
		
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""Шапка""]);
		УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати);
		
	КонецЦикла;
	
	АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	ОфисныеДокументы.Вставить(АдресХранилищаПечатнойФормы, ПараметрыВывода.Синоним);
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма);
	
    Возврат ОфисныеДокументы;
	
КонецФункции

Функция ПолучитьОписаниеОбластей(Макет)
	
	ОписаниеОбластей = Новый Структура;
	Для Каждого ТекОбласть Из Макет.СтруктураДокумента.ОбластиДокумента Цикл
		ИмяОбласти = ТекОбласть.Ключ;
		ТипОбласти = ""Общая"";
		Если СтрНайти(ИмяОбласти, ""СтрокаТаблицы"") > 0 Тогда 
			ТипОбласти = ""СтрокаТаблицы"";
		КонецЕсли;
		
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяОбласти, ТипОбласти);
	КонецЦикла;
	
	Возврат ОписаниеОбластей;
	
КонецФункции
"}
},
{0,
{"Печать офисный документ",0,0,"","ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""Идентификатор"");<Идентификатор>
	Если  ПечатнаяФорма <> Неопределено Тогда
		Синоним = НСтр(""ru = ''"");<Синоним>
		ПараметрыВывода.Вставить(""Синоним"", Синоним);
		ОфисныеДокументы = СформироватьОфисныйДокумент(МассивОбъектов, ОбъектыПечати, ПараметрыВывода);
		ПечатнаяФорма.СинонимМакета = Синоним;
		ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;"}
}
},
{9,
{"Подключаемые команды",1,0,"",""},
{0,
{"МодульФормыСписка",0,0,"","#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"МодульФормыОбъекта",0,0,"","#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда 
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"ПриСозданииНаСервере в модулях форм",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПодключаемыеКоманды в модуле формы списка",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"СписокПриАктивизацииСтроки в модуле формы списка",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПодключаемыеКоманды в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПриЧтенииНаСервере в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПриОткрытии в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПослеЗаписи в модуле формы объекта",0,0,"","ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);"}
}
},
{0,
{"СтруктураМодуляФормы",0,0,"","#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"СтруктураМодуляОбъекта",0,0,"","#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти"}
},
{0,
{"СтруктураОбщегоМодуля",0,0,"","#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
}
},
{5,
{"ЗУП",1,0,"",""},
{0,
{"Сведения о руководителе подразделения",0,0,"","МестоВСтруктуреПредприятия = ОрганизационнаяСтруктура.ПодразделениеВСтруктуреПредприятия(ПодразделениеОрганизации);
ПозицияРуководителя = РуководителиПодразделений.ПозицияРуководителя(МестоВСтруктуреПредприятия);
СотрудникРуководителя = РуководителиПодразделений.СотрудникНаПозицииРуководителя(ПозицияРуководителя);"}
},
{0,
{"Отформатировать подразделение",0,0,"","Функция ОтформатироватьПодразделение(Знач Наименование, Падеж = 1, Развернуть = Ложь)

	Если ТипЗнч(Наименование) = Тип(""СправочникСсылка.ПодразделенияОрганизаций"") Тогда 
		Наименование = Наименование.НаименованиеДляЗаписейОТрудовойДеятельности;
	КонецЕсли;
	
	Массив = СтрРазделить(Наименование, ""/"", Ложь);
	
	Для Сч = 0 По Массив.Количество() - 1 Цикл
		Значение = СокрЛП(Массив[Сч]);
		Значение = НРег(Лев(Значение, 1)) + Сред(Значение, 2);
		Если Падеж > 1 Тогда
			Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Значение, Падеж);
		КонецЕсли;
		Массив[Сч] = Значение;
	КонецЦикла;
		
	НовыйМассив = Новый Массив;
	
	Если Развернуть Тогда 
		Сч = Массив.Количество() - 1;
		Пока Сч >= 0 Цикл 
			Значение = Массив[Сч];
			НовыйМассив.Добавить(Значение);
			
			Сч = Сч - 1;
		КонецЦикла;
	Иначе
		НовыйМассив = Массив;
	КонецЕсли;
	
	Наименование = СтрСоединить(НовыйМассив, "" "");
	
	Возврат Наименование;

КонецФункции // ОтформатироватьПодразделение()"}
},
{0,
{"Отформатировать разряд",0,0,"","Функция ОтформатироватьРазряд(Знач РазрядКатегория)
	
	Если Не ЗначениеЗаполнено(РазрядКатегория) Тогда 
		Возврат """";
	КонецЕсли;
	
	РазрядКатегория = Строка(РазрядКатегория);

	Возврат "" "" + СокрЛП(Лев(СокрЛП(РазрядКатегория), 2)) + "" разряда"";

КонецФункции // ОтформатироватьРазряд()"}
},
{0,
{"Заполнить руководителей подразделения",0,0,"","Процедура ЗаполнитьРуководителейПодразделения(ДанныеПечати, Подразделение, ПериодПросмотра = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПериодПросмотра) Тогда 
		ПериодПросмотра = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеПечати.Вставить(""Руководитель1Должность"", ""_______________"");
	ДанныеПечати.Вставить(""Руководитель1ФамилияИО"", ""_______________"");
	ДанныеПечати.Вставить(""Руководитель2Должность"", ""_______________"");
	ДанныеПечати.Вставить(""Руководитель2ФамилияИО"", ""_______________"");

	МестоВСтруктуреПредприятия = ОрганизационнаяСтруктура.ПодразделениеВСтруктуреПредприятия(Подразделение);
	ПозицияРуководителя = РуководителиПодразделений.ПозицияРуководителя(МестоВСтруктуреПредприятия);
	СотрудникРуководителя = РуководителиПодразделений.СотрудникНаПозицииРуководителя(ПозицияРуководителя);
	Если ЗначениеЗаполнено(СотрудникРуководителя) Тогда 
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, СотрудникРуководителя, ""Должность"", ПериодПросмотра);
		ДанныеПечати.Вставить(""Руководитель1Должность"", КадровыеДанные.Должность);
		ДанныеПечати.Вставить(""Руководитель1ФамилияИО"", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(КадровыеДанные.ФизическоеЛицо));
	КонецЕсли;
	
	МестоВСтруктуреПредприятия = ОрганизационнаяСтруктура.ПодразделениеВСтруктуреПредприятия(Подразделение.Родитель);
	ПозицияРуководителя = РуководителиПодразделений.ПозицияРуководителя(МестоВСтруктуреПредприятия);
	СотрудникРуководителя = РуководителиПодразделений.СотрудникНаПозицииРуководителя(ПозицияРуководителя);
	Если ЗначениеЗаполнено(СотрудникРуководителя) Тогда 
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, СотрудникРуководителя, ""Должность"", ПериодПросмотра);
		ДанныеПечати.Вставить(""Руководитель2Должность"", КадровыеДанные.Должность);
		ДанныеПечати.Вставить(""Руководитель2ФамилияИО"", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(КадровыеДанные.ФизическоеЛицо));
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"Заполнить данные исполнителя",0,0,"","Процедура ЗаполнитьДанныеИсполнителя(ДанныеПечати, ФизическоеЛицо, Организация, ПериодПросмотра = Неопределено)
	
	ДанныеПечати.Вставить(""ПодразделениеИсполнителя"", ""_______________"");
	ДанныеПечати.Вставить(""ИсполнительИО"", ""_______________"");
	ДанныеПечати.Вставить(""ИсполнительРабочийТелефон"", ""_______________"");
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодПросмотра) Тогда
		ПериодПросмотра = ТекущаяДатаСеанса();
	КонецЕсли;

	Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо, Организация, ПериодПросмотра);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ""Подразделение,Должность"", ПериодПросмотра);
	ДанныеПечати.Вставить(""ПодразделениеИсполнителя"", КадровыеДанные.Подразделение);
	ДанныеПечати.Вставить(""ИсполнительДолжность"", КадровыеДанные.Должность);
	ДанныеПечати.Вставить(""ИсполнительИО"", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФизическоеЛицо));
	ДанныеПечати.Вставить(""ИсполнительРабочийТелефон"", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, ПериодПросмотра, Истина));

КонецПроцедуры"}
}
}
}
}