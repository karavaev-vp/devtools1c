{1,
{6,
{"Караваев",1,0,"",""},
{0,
{"Комментарий изменений",0,0,"Комм","//ИТС+ Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">
<?>
//ИТС- Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">"}
},
{0,
{"Текущие данные табличной части",0,0,"Тек","ТекущиеДанные = Элементы.<?""Табличная часть"">.ТекущиеДанные;

Если ТекущиеДанные = Неопределено Тогда
	Возврат;
КонецЕсли;

<?>"}
},
{0,
{"Запрос",0,0,"Запр","Запрос = Новый Запрос;
Запрос.Текст = ""<?>"";"}
},
{0,
{"СКД в таблицу значений",0,0,"СКД","СхемаКомпоновкиДанных = Обработки.ИТС_ФормированиеДокументов.ПолучитьМакет(""Макет"");
НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных.Элементы;
//ПараметрыДанных.Найти(""ИмяПараметра"").Значение = ЗначениеПараметра;

ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки,, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);

ТаблицаДанных = Новый ТаблицаЗначений;
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);"}
},
{2,
{"Асинхронные вызовы",1,0,"",""},
{0,
{"Асинхронная процедура",0,0,"Асинх","#Область <?""Имя процедуры"">
// Подготавливает параметры для выполнения фонового задания
// вызывает серверную функцию для запуска фонового задания
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеНаКлиенте()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""Процедура"",				<ИмяЭкспортнойПроцедурыМодуляМенеджера>);
	СтруктураПараметров.Вставить(""ТекстСообщения"", 			<ТекстСообщенияВФормеДлительнойОперации>);
	СтруктураПараметров.Вставить(""ТекстСообщенияВыполнено"",	<ТекстСообщенияВыполнено>);
	СтруктураПараметров.Вставить(""ТекстСообщенияОтмена"",	<ТекстСообщенияОтмена>);
	
	<?>
		
	ДлительнаяОперация = <?""Имя процедуры"">ВФонеНаСервере(СтруктураПараметров);
	Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеЗавершение"", ЭтотОбъект, СтруктураПараметров);
	
	Если ДлительнаяОперация.Статус = ""Выполняется"" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ТекстСообщения = СтруктураПараметров.ТекстСообщения;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		<?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеНаКлиенте()

// Инициализирует и запускает выполнение задания в фоне
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, которая будет передана в процедуру
//
// Возвращаемое значение:
//   Структура   - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеНаСервере(Знач СтруктураПараметров)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(СтруктураПараметров.Процедура, СтруктураПараметров, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;

КонецФункции // <?""Имя процедуры"">ВФонеНаСервере()

// Вызывается по завершению выполнения фонового задания
//
// Параметры:
//  ДлительнаяОперация  - Структура - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//	СтруктураПараметров - Структура - Структура дополнительных параметров переданная в процедуре <?""Имя процедуры"">ВФонеНаКлиенте()
//                 
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров) Экспорт 

	Если Не ТипЗнч(ДлительнаяОперация) = Тип(""Структура"") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = ""Выполнено"" Тогда
		МассивСообщений = <?""Имя процедуры"">ВФонеОбработатьРезультат(ДлительнаяОперация.АдресРезультата);
		
		Для Каждого ТекСообщение Из МассивСообщений Цикл
			Сообщить(ТекСообщение);
		КонецЦикла;
				
		Если СтруктураПараметров.Свойство(""ТекстСообщенияВыполнено"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияВыполнено);
		КонецЕсли;
	ИначеЕсли ДлительнаяОперация.Статус = ""Ошибка"" Тогда
		Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеОшибка"", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, ДлительнаяОперация.ПодробноеПредставлениеОшибки);		
	ИначеЕсли ДлительнаяОперация.Статус = ""Отменено"" Тогда 
		Если СтруктураПараметров.Свойство(""ТекстСообщенияОтмена"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеЗавершение()

// Получает из временного хранилища результат выполения фонового задания
//
// Параметры:
//  АдресРезультата  - Строка - Адрес результата во временном хранилище
//
// Возвращаемое значение:
//   Массив   - Массив строк сообщений из процедуры выполнения фонового задания
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеОбработатьРезультат(АдресРезультата)

	МассивСообщений = Новый Массив;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ТипЗнч(СтруктураВозврата) = Тип(""Структура"") Тогда
		Возврат МассивСообщений;
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство(""Успешно"") И СтруктураВозврата.Успешно Тогда 
		<ВставитьОбработкуРезультата>
	КонецЕсли;
		
	Если СтруктураВозврата.Свойство(""МассивСообщений"") Тогда
		МассивСообщений = СтруктураВозврата.МассивСообщений;
	КонецЕсли;
	
	Возврат МассивСообщений;
			
КонецФункции // <?""Имя процедуры"">ВФонеОбработатьРезультат()

// Вызывается при обработке результата выполнения фонового задания, при возникновении ошибки в процедуре фонового задания
// Например, можно перезапустить выполнение фонового задания
//
// Параметры:
//  ДопПараметры  - Структура - Дополнительные параметры переданные в Предупреждение об ошибке в процедуре <?""Имя процедуры"">ВФонеЗавершение
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеОшибка(ДопПараметры) Экспорт 

	<ВставитьОбрабокуЕслиЕстьОшибка>
		
КонецПроцедуры // <?""Имя процедуры"">ВФонеОшибка()
#КонецОбласти"}
},
{0,
{"Асинхронная процедура вызываемая в фоновом задании",0,1,"Асинх","#Область <?""Имя процедуры"">
// Процедура вызывается при обработке выполнения фонового задания
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, переданная при запуске фонового задания
//  АдресХранилища  - Строка - Адрес во временном хранилище для помещения результата работы процедуры
//
Процедура <?""Имя процедуры"">(СтруктураПараметров, АдресХранилища) Экспорт 
	
	ДлительныеОперации.СообщитьПрогресс(0, """");
	
	Успешно = Истина;
	МассивСообщений = Новый Массив;
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить(""Успешно"", Успешно);
	СтруктураВозврата.Вставить(""МассивСообщений"", МассивСообщений);
	
	<?>
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры
#КонецОбласти"}
}
},
{3,
{"БСП",1,0,"",""},
{3,
{"ДополнительныеОтчетыИОбработки",1,0,"",""},
{0,
{"Дополнительная обработка",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней обработки
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
},
{0,
{"Дополнительный отчет",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней обработки, отчета, печатной формы
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
},
{0,
{"Внешняя печатная форма",0,0,"БСП","#Область СведенияОВнешнейОбработке
//Описание внешней печатной формы
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Документ"", Документ>"");
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.Модификатор = ""ПечатьMXL"";
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<?""Идентификатор"">"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = Сформировать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""Наименование"">'"");
    КонецЕсли;
	
КонецПроцедуры

Функция Сформировать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_<?""Идентификатор"">"";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Макет = ПолучитьМакет(""ПФ_MXL_<?""Идентификатор"">"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	               |	<?""Документ"", Документ>.Ссылка КАК Ссылка,
	               |	<?""Документ"", Документ>.Номер КАК Номер,
	               |	<?""Документ"", Документ>.Дата КАК Дата
	               |ИЗ
	               |	Документ.<?""Документ"", Документ> КАК <?""Документ"", Документ>
	               |ГДЕ
	               |	<?""Документ"", Документ>.Ссылка В(&МассивОбъектов)"";
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть(""Шапка"");
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ПоляЗаголовка = Новый Структура(""Номер, Дата, ГосударственныйКонтракт"");
		ЗаполнитьЗначенияСвойств(ПоляЗаголовка, Шапка);
		ПредставлениеФормы = ""<?""Наименование"">"";
		ДанныеОбласти = Новый Структура;
		ДанныеОбласти.Вставить(
			""ТекстЗаголовка"",
			ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ПоляЗаголовка, ПредставлениеФормы, Истина));
			
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеОбласти);		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		<?>
		
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть(""Подвал"");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;	
	
    Возврат ТабличныйДокумент;
	
КонецФункции"}
}
},
{6,
{"Печать",1,0,"",""},
{0,
{"ДобавитьКомандыПечати процедура в модуле менеджера",0,0,"БСП","#Область Печать
// СтандартныеПодсистемы.Печать
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	<?>
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
#КонецОбласти"}
},
{0,
{"КомандаПечати в модуле менеджера",0,0,"БСП","// <?""Представление"">
КомандаПечати = КомандыПечати.Добавить();
КомандаПечати.МенеджерПечати = ""Документ.<?""Документ"", Документ>"";
КомандаПечати.Идентификатор = ""<?""Идентификатор"">"";
КомандаПечати.Представление = НСтр(""ru = '<?""Представление"">'"");
КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;"}
},
{0,
{"Печать в модуле менеджера",0,0,"БСП","// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати - СписокЗначений - значение - ссылка на объект;
//                                            представление - имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода - Структура - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"Печать код вызова формирования печатной формы",0,0,"БСП","НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ""<?""Идентификатор"">"");
Если НужноПечататьМакет Тогда
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм,
	""<?""Идентификатор"">"",
	НСтр(""ru = '<?""Представление"">'""),
	Печать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати),
	,
	""Документ.<?""Документ"", Документ>.ПФ_MXL_<?""Идентификатор"">"");
КонецЕсли;"}
},
{0,
{"Печать функция формирования табличного документа",0,0,"БСП","Функция Печать<?""Идентификатор"">(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_<?""Идентификатор"">"";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.Автомасштаб = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(""Документ.<?""Документ"", Документ>.ПФ_MXL_<?""Идентификатор"">"");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	               |	<?""Документ"", Документ>.Ссылка КАК Ссылка,
	               |	<?""Документ"", Документ>.Номер КАК Номер,
	               |	<?""Документ"", Документ>.Дата КАК Дата
	               |ИЗ
	               |	Документ.<?""Документ"", Документ> КАК <?""Документ"", Документ>
	               |ГДЕ
	               |	<?""Документ"", Документ>.Ссылка В(&МассивОбъектов)"";
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть(""Шапка"");
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ПоляЗаголовка = Новый Структура(""Номер, Дата, ГосударственныйКонтракт"");
		ЗаполнитьЗначенияСвойств(ПоляЗаголовка, Шапка);
		ПредставлениеФормы = ""<?""Представление"">"";
		ДанныеОбласти = Новый Структура;
		ДанныеОбласти.Вставить(
			""ТекстЗаголовка"",
			ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(ПоляЗаголовка, ПредставлениеФормы, Истина));
			
		ОбластьМакетаШапка.Параметры.Заполнить(ДанныеОбласти);		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		<?>
		
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть(""Подвал"");
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;	
	
    Возврат ТабличныйДокумент;
	
КонецФункции"}
},
{0,
{"Печать для отладки в форме",0,0,"","#Область Печать
&НаКлиенте
Процедура Печать(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	ПечатьНаСервере(ТабДок);
	ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере(ТабДок)
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.СсылкаНаОбъект);
	
	МассивПечатныхФорм	= Новый Массив;
	МассивПечатныхФорм.Добавить(""<?""Идентификатор команды"">"");
	
	КоллекцияПечатныхФорм	= ПодготовитьКоллекциюПечатныхФорм(МассивПечатныхФорм);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(Объект.СсылкаНаОбъект);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить(""ДоступнаПечатьПоКомплектно"",Истина);
	ОбработкаОбъект.Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ТабДок = КоллекцияПечатныхФорм[0].ТабличныйДокумент;

КонецПРоцедуры 

Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить(""ИмяМакета"");
	Макеты.Колонки.Добавить(""ИмяВРЕГ"");
	Макеты.Колонки.Добавить(""СинонимМакета"");
	Макеты.Колонки.Добавить(""ТабличныйДокумент"");
	Макеты.Колонки.Добавить(""Экземпляров"");
	Макеты.Колонки.Добавить(""Картинка"");
	Макеты.Колонки.Добавить(""ПолныйПутьКМакету"");
	Макеты.Колонки.Добавить(""ИмяФайлаПечатнойФормы"");
	
	Если ТипЗнч(ИменаМакетов) = Тип(""Строка"") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, ""ИмяМакета"");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции
#КонецОбласти"}
}
},
{6,
{"Подключаемые команды",1,0,"",""},
{0,
{"ПриСозданииНаСервере в модулях форм",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПодключаемыеКоманды в модуле формы списка",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"СписокПриАктивизацииСтроки в модуле формы списка",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПодключаемыеКоманды в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПриЧтенииНаСервере в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
},
{0,
{"ПриОткрытии в модуле формы объекта",0,0,"БСП","// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды"}
}
}
}
}
}