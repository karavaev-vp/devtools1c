{1,
{5,
{"Караваев",1,0,"",""},
{0,
{"Асинхронная процедура",0,0,"Асинх","#Область <?""Имя процедуры"">
// Подготавливает параметры для выполнения фонового задания
// вызывает серверную функцию для запуска фонового задания
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеНаКлиенте()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""Процедура"",				<ИмяЭкспортнойПроцедурыМодуляМенеджера>);
	СтруктураПараметров.Вставить(""ТекстСообщения"", 			<ТекстСообщенияВФормеДлительнойОперации>);
	СтруктураПараметров.Вставить(""ТекстСообщенияВыполнено"",	<ТекстСообщенияВыполнено>);
	СтруктураПараметров.Вставить(""ТекстСообщенияОтмена"",	<ТекстСообщенияОтмена>);
	<?>
	
	ДлительнаяОперация = <?""Имя процедуры"">ВФонеНаСервере(СтруктураПараметров);
	Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеЗавершение"", ЭтотОбъект, СтруктураПараметров);
	
	Если ДлительнаяОперация.Статус = ""Выполняется"" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		ПараметрыОжидания.ТекстСообщения = СтруктураПараметров.ТекстСообщения;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		<?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеНаКлиенте()

// Инициализирует и запускает выполнение задания в фоне
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, которая будет передана в процедуру
//
// Возвращаемое значение:
//   Структура   - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеНаСервере(Знач СтруктураПараметров)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(СтруктураПараметров.Процедура, СтруктураПараметров, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;

КонецФункции // <?""Имя процедуры"">ВФонеНаСервере()

// Вызывается по завершению выполнения фонового задания
//
// Параметры:
//  ДлительнаяОперация  - Структура - Параметры выполнения задания, см. описание ДлительныеОперации.ВыполнитьВФоне()
//	СтруктураПараметров - Структура - Структура дополнительных параметров переданная в процедуре <?""Имя процедуры"">ВФонеНаКлиенте()
//                 
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеЗавершение(ДлительнаяОперация, СтруктураПараметров) Экспорт 

	Если Не ТипЗнч(ДлительнаяОперация) = Тип(""Структура"") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = ""Выполнено"" Тогда
		МассивСообщений = <?""Имя процедуры"">ВФонеОбработатьРезультат(ДлительнаяОперация.АдресРезультата);
		
		Для Каждого ТекСообщение Из МассивСообщений Цикл
			Сообщить(ТекСообщение);
		КонецЦикла;
				
		Если СтруктураПараметров.Свойство(""ТекстСообщенияВыполнено"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияВыполнено);
		КонецЕсли;
	ИначеЕсли ДлительнаяОперация.Статус = ""Ошибка"" Тогда
		Оповещение = Новый ОписаниеОповещения(""<?""Имя процедуры"">ВФонеОшибка"", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, ДлительнаяОперация.ПодробноеПредставлениеОшибки);		
	ИначеЕсли ДлительнаяОперация.Статус = ""Отменено"" Тогда 
		Если СтруктураПараметров.Свойство(""ТекстСообщенияОтмена"") Тогда
			ПоказатьОповещениеПользователя(СтруктураПараметров.ТекстСообщенияОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // <?""Имя процедуры"">ВФонеЗавершение()

// Получает из временного хранилища результат выполения фонового задания
//
// Параметры:
//  АдресРезультата  - Строка - Адрес результата во временном хранилище
//
// Возвращаемое значение:
//   Массив   - Массив строк сообщений из процедуры выполнения фонового задания
//
&НаСервере
Функция <?""Имя процедуры"">ВФонеОбработатьРезультат(АдресРезультата)

	МассивСообщений = Новый Массив;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Не ТипЗнч(СтруктураВозврата) = Тип(""Структура"") Тогда
		Возврат МассивСообщений;
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство(""Успешно"") И СтруктураВозврата.Успешно Тогда 
		<ВставитьОбработкуРезультата>
	КонецЕсли;
		
	Если СтруктураВозврата.Свойство(""МассивСообщений"") Тогда
		МассивСообщений = СтруктураВозврата.МассивСообщений;
	КонецЕсли;
	
	Возврат МассивСообщений;
			
КонецФункции // <?""Имя процедуры"">ВФонеОбработатьРезультат()

// Вызывается при обработке результата выполнения фонового задания, при возникновении ошибки в процедуре фонового задания
// Например, можно перезапустить выполнение фонового задания
//
// Параметры:
//  ДопПараметры  - Структура - Дополнительные параметры переданные в Предупреждение об ошибке в процедуре <?""Имя процедуры"">ВФонеЗавершение
//
&НаКлиенте
Процедура <?""Имя процедуры"">ВФонеОшибка(ДопПараметры) Экспорт 

	<ВставитьОбрабокуЕслиЕстьОшибка>
		
КонецПроцедуры // <?""Имя процедуры"">ВФонеОшибка()
#КонецОбласти"}
},
{0,
{"Асинхронная процедура вызываемая в фоновом задании",0,1,"Асинх","#Область <?""Имя процедуры"">
// Процедура вызывается при обработке выполнения фонового задания
//
// Параметры:
//  СтруктураПараметров  - Структура - Структура параметров, переданная при запуске фонового задания
//  АдресХранилища  - Строка - Адрес во временном хранилище для помещения результата работы процедуры
//
Процедура <?""Имя процедуры"">(СтруктураПараметров, АдресХранилища) Экспорт 
	
	ДлительныеОперации.СообщитьПрогресс(0, """");
	
	Успешно = Истина;
	МассивСообщений = Новый Массив;
	
	<?>
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить(""Успешно"", Успешно);
	СтруктураВозврата.Вставить(""МассивСообщений"", МассивСообщений);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	
КонецПроцедуры
#КонецОбласти"}
},
{0,
{"Комментарий изменений",0,0,"Комм","//ИТС+ Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">
<?>
//ИТС- Караваев <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">"}
},
{0,
{"Дополнительная обработка",0,0,"Внеш","#Область СведенияОВнешнейОбработке
//Описание внешней обработки
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
},
{0,
{"Дополнительный отчет",0,0,"Внеш","#Область СведенияОВнешнейОбработке
//Описание внешней обработки, отчета, печатной формы
Функция СведенияОВнешнейОбработке() Экспорт
	
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
    ПараметрыРегистрации.Версия = ""1.0.0.1"";	
	ПараметрыРегистрации.Вставить(""Наименование"", ""<?""Наименование"">"");
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"", Истина);
	ПараметрыРегистрации.Вставить(""Информация"", """");
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Наименование"">'"");
    Команда.Идентификатор = ""<?""Идентификатор"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции
#КонецОбласти"}
}
}
}